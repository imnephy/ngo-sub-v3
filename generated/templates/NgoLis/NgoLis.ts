// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  TypedMap,
  ethereum,
} from "@graphprotocol/graph-ts"

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this)
  }
}

export class Claimed__Params {
  _event: Claimed

  constructor(event: Claimed) {
    this._event = event
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get _eth(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class NGOCreated extends ethereum.Event {
  get params(): NGOCreated__Params {
    return new NGOCreated__Params(this)
  }
}

export class NGOCreated__Params {
  _event: NGOCreated

  constructor(event: NGOCreated) {
    this._event = event
  }

  get _name(): string {
    return this._event.parameters[0].value.toString()
  }

  get _imageLink(): string {
    return this._event.parameters[1].value.toString()
  }

  get _description(): string {
    return this._event.parameters[2].value.toString()
  }

  get _link(): string {
    return this._event.parameters[3].value.toString()
  }

  get rewardsOwner(): Address {
    return this._event.parameters[4].value.toAddress()
  }

  get _ngoAddress(): Address {
    return this._event.parameters[5].value.toAddress()
  }
}

export class NGOFinished extends ethereum.Event {
  get params(): NGOFinished__Params {
    return new NGOFinished__Params(this)
  }
}

export class NGOFinished__Params {
  _event: NGOFinished

  constructor(event: NGOFinished) {
    this._event = event
  }

  get _ngo(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get _timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class RewardsUpdated extends ethereum.Event {
  get params(): RewardsUpdated__Params {
    return new RewardsUpdated__Params(this)
  }
}

export class RewardsUpdated__Params {
  _event: RewardsUpdated

  constructor(event: RewardsUpdated) {
    this._event = event
  }

  get _rewardsPool(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get _stakedBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get _totalShare(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get _dateRecountRewards(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this)
  }
}

export class Staked__Params {
  _event: Staked

  constructor(event: Staked) {
    this._event = event
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get _amountStaked(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get _percentShare(): i32 {
    return this._event.parameters[2].value.toI32()
  }

  get _duration(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get _ngo(): Address {
    return this._event.parameters[4].value.toAddress()
  }

  get _startDate(): BigInt {
    return this._event.parameters[5].value.toBigInt()
  }
}

export class WithdrawClaimed extends ethereum.Event {
  get params(): WithdrawClaimed__Params {
    return new WithdrawClaimed__Params(this)
  }
}

export class WithdrawClaimed__Params {
  _event: WithdrawClaimed

  constructor(event: WithdrawClaimed) {
    this._event = event
  }

  get _claimer(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get _ngo(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get _requestId(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class WithdrawRequested extends ethereum.Event {
  get params(): WithdrawRequested__Params {
    return new WithdrawRequested__Params(this)
  }
}

export class WithdrawRequested__Params {
  _event: WithdrawRequested

  constructor(event: WithdrawRequested) {
    this._event = event
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get _ngo(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get _requestId(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class NgoLis__getHistoryDataResult {
  value0: BigInt
  value1: BigInt
  value2: BigInt

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0
    this.value1 = value1
    this.value2 = value2
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1))
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2))
    return map
  }

  get_reward(): BigInt {
    return this.value0
  }

  get_totalShares(): BigInt {
    return this.value1
  }

  get_balance(): BigInt {
    return this.value2
  }
}

export class NgoLis__getUserShareResult {
  value0: BigInt
  value1: BigInt

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0
    this.value1 = value1
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>()
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0))
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1))
    return map
  }

  get_userRewards(): BigInt {
    return this.value0
  }

  get_ngoRewards(): BigInt {
    return this.value1
  }
}

export class NgoLis__getUserStakeInfoResult_userStakeInfoStruct extends ethereum.Tuple {
  get percent(): i32 {
    return this[0].toI32()
  }

  get duration(): BigInt {
    return this[1].toBigInt()
  }

  get amount(): BigInt {
    return this[2].toBigInt()
  }

  get startDate(): BigInt {
    return this[3].toBigInt()
  }
}

export class NgoLis extends ethereum.SmartContract {
  static bind(address: Address): NgoLis {
    return new NgoLis("NgoLis", address)
  }

  _rewardsToNgo(): BigInt {
    let result = super.call(
      "_rewardsToNgo",
      "_rewardsToNgo():(uint256)",
      []
    )

    return result[0].toBigInt()
  }

  try__rewardsToNgo(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_rewardsToNgo",
      "_rewardsToNgo():(uint256)",
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getHistoryData(_timestamp: BigInt): NgoLis__getHistoryDataResult {
    let result = super.call(
      "getHistoryData",
      "getHistoryData(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    )

    return new NgoLis__getHistoryDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    )
  }

  try_getHistoryData(
    _timestamp: BigInt
  ): ethereum.CallResult<NgoLis__getHistoryDataResult> {
    let result = super.tryCall(
      "getHistoryData",
      "getHistoryData(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new NgoLis__getHistoryDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    )
  }

  getRoundDate(_timestamp: BigInt): BigInt {
    let result = super.call(
      "getRoundDate",
      "getRoundDate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    )

    return result[0].toBigInt()
  }

  try_getRoundDate(_timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoundDate",
      "getRoundDate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getUserShare(_user: Address): NgoLis__getUserShareResult {
    let result = super.call(
      "getUserShare",
      "getUserShare(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    )

    return new NgoLis__getUserShareResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    )
  }

  try_getUserShare(
    _user: Address
  ): ethereum.CallResult<NgoLis__getUserShareResult> {
    let result = super.tryCall(
      "getUserShare",
      "getUserShare(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      new NgoLis__getUserShareResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    )
  }

  getUserStakeInfo(
    _user: Address
  ): NgoLis__getUserStakeInfoResult_userStakeInfoStruct {
    let result = super.call(
      "getUserStakeInfo",
      "getUserStakeInfo(address):((uint16,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_user)]
    )

    return changetype<NgoLis__getUserStakeInfoResult_userStakeInfoStruct>(
      result[0].toTuple()
    )
  }

  try_getUserStakeInfo(
    _user: Address
  ): ethereum.CallResult<NgoLis__getUserStakeInfoResult_userStakeInfoStruct> {
    let result = super.tryCall(
      "getUserStakeInfo",
      "getUserStakeInfo(address):((uint16,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_user)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      changetype<NgoLis__getUserStakeInfoResult_userStakeInfoStruct>(
        value[0].toTuple()
      )
    )
  }

  isFinish(): boolean {
    let result = super.call("isFinish", "isFinish():(bool)", [])

    return result[0].toBoolean()
  }

  try_isFinish(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinish", "isFinish():(bool)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  isInitialized(): boolean {
    let result = super.call(
      "isInitialized",
      "isInitialized():(bool)",
      []
    )

    return result[0].toBoolean()
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInitialized",
      "isInitialized():(bool)",
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  lastCountRewardsTimestamp(): BigInt {
    let result = super.call(
      "lastCountRewardsTimestamp",
      "lastCountRewardsTimestamp():(uint256)",
      []
    )

    return result[0].toBigInt()
  }

  try_lastCountRewardsTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCountRewardsTimestamp",
      "lastCountRewardsTimestamp():(uint256)",
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  lidoSC(): Address {
    let result = super.call("lidoSC", "lidoSC():(address)", [])

    return result[0].toAddress()
  }

  try_lidoSC(): ethereum.CallResult<Address> {
    let result = super.tryCall("lidoSC", "lidoSC():(address)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", [])

    return result[0].toAddress()
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  rewardsOwner(): Address {
    let result = super.call(
      "rewardsOwner",
      "rewardsOwner():(address)",
      []
    )

    return result[0].toAddress()
  }

  try_rewardsOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardsOwner",
      "rewardsOwner():(address)",
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  stakedToday(): BigInt {
    let result = super.call(
      "stakedToday",
      "stakedToday():(uint256)",
      []
    )

    return result[0].toBigInt()
  }

  try_stakedToday(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedToday",
      "stakedToday():(uint256)",
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  totalShareToday(): BigInt {
    let result = super.call(
      "totalShareToday",
      "totalShareToday():(uint256)",
      []
    )

    return result[0].toBigInt()
  }

  try_totalShareToday(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalShareToday",
      "totalShareToday():(uint256)",
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  withdrawalSC(): Address {
    let result = super.call(
      "withdrawalSC",
      "withdrawalSC():(address)",
      []
    )

    return result[0].toAddress()
  }

  try_withdrawalSC(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalSC",
      "withdrawalSC():(address)",
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }
}

export class ClaimWithdrawalCall extends ethereum.Call {
  get inputs(): ClaimWithdrawalCall__Inputs {
    return new ClaimWithdrawalCall__Inputs(this)
  }

  get outputs(): ClaimWithdrawalCall__Outputs {
    return new ClaimWithdrawalCall__Outputs(this)
  }
}

export class ClaimWithdrawalCall__Inputs {
  _call: ClaimWithdrawalCall

  constructor(call: ClaimWithdrawalCall) {
    this._call = call
  }

  get _requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class ClaimWithdrawalCall__Outputs {
  _call: ClaimWithdrawalCall

  constructor(call: ClaimWithdrawalCall) {
    this._call = call
  }
}

export class EndNGOCall extends ethereum.Call {
  get inputs(): EndNGOCall__Inputs {
    return new EndNGOCall__Inputs(this)
  }

  get outputs(): EndNGOCall__Outputs {
    return new EndNGOCall__Outputs(this)
  }
}

export class EndNGOCall__Inputs {
  _call: EndNGOCall

  constructor(call: EndNGOCall) {
    this._call = call
  }
}

export class EndNGOCall__Outputs {
  _call: EndNGOCall

  constructor(call: EndNGOCall) {
    this._call = call
  }
}

export class HandleNGOShareDistributionCall extends ethereum.Call {
  get inputs(): HandleNGOShareDistributionCall__Inputs {
    return new HandleNGOShareDistributionCall__Inputs(this)
  }

  get outputs(): HandleNGOShareDistributionCall__Outputs {
    return new HandleNGOShareDistributionCall__Outputs(this)
  }
}

export class HandleNGOShareDistributionCall__Inputs {
  _call: HandleNGOShareDistributionCall

  constructor(call: HandleNGOShareDistributionCall) {
    this._call = call
  }
}

export class HandleNGOShareDistributionCall__Outputs {
  _call: HandleNGOShareDistributionCall

  constructor(call: HandleNGOShareDistributionCall) {
    this._call = call
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this)
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this)
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }

  get lidoSCAddress(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get _rewardOwnerAddress(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get withdrawalSCAddress(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get oracleAddress(): Address {
    return this._call.inputValues[3].value.toAddress()
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }
}

export class RequestWithdrawForOwnerCall extends ethereum.Call {
  get inputs(): RequestWithdrawForOwnerCall__Inputs {
    return new RequestWithdrawForOwnerCall__Inputs(this)
  }

  get outputs(): RequestWithdrawForOwnerCall__Outputs {
    return new RequestWithdrawForOwnerCall__Outputs(this)
  }
}

export class RequestWithdrawForOwnerCall__Inputs {
  _call: RequestWithdrawForOwnerCall

  constructor(call: RequestWithdrawForOwnerCall) {
    this._call = call
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class RequestWithdrawForOwnerCall__Outputs {
  _call: RequestWithdrawForOwnerCall

  constructor(call: RequestWithdrawForOwnerCall) {
    this._call = call
  }
}

export class RequestWithdrawalsCall extends ethereum.Call {
  get inputs(): RequestWithdrawalsCall__Inputs {
    return new RequestWithdrawalsCall__Inputs(this)
  }

  get outputs(): RequestWithdrawalsCall__Outputs {
    return new RequestWithdrawalsCall__Outputs(this)
  }
}

export class RequestWithdrawalsCall__Inputs {
  _call: RequestWithdrawalsCall

  constructor(call: RequestWithdrawalsCall) {
    this._call = call
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class RequestWithdrawalsCall__Outputs {
  _call: RequestWithdrawalsCall

  constructor(call: RequestWithdrawalsCall) {
    this._call = call
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this)
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this)
  }
}

export class StakeCall__Inputs {
  _call: StakeCall

  constructor(call: StakeCall) {
    this._call = call
  }

  get _ngoPercent(): i32 {
    return this._call.inputValues[0].value.toI32()
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class StakeCall__Outputs {
  _call: StakeCall

  constructor(call: StakeCall) {
    this._call = call
  }
}
