// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NGOFinished extends ethereum.Event {
  get params(): NGOFinished__Params {
    return new NGOFinished__Params(this);
  }
}

export class NGOFinished__Params {
  _event: NGOFinished;

  constructor(event: NGOFinished) {
    this._event = event;
  }

  get _ngo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardsUpdated extends ethereum.Event {
  get params(): RewardsUpdated__Params {
    return new RewardsUpdated__Params(this);
  }
}

export class RewardsUpdated__Params {
  _event: RewardsUpdated;

  constructor(event: RewardsUpdated) {
    this._event = event;
  }

  get _rewardsPool(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakedBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalShare(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _dateRecountRewards(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _blockNumber(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amountStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _percentShare(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get _ngo(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _startDate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get _blockNumber(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawClaimed extends ethereum.Event {
  get params(): WithdrawClaimed__Params {
    return new WithdrawClaimed__Params(this);
  }
}

export class WithdrawClaimed__Params {
  _event: WithdrawClaimed;

  constructor(event: WithdrawClaimed) {
    this._event = event;
  }

  get _claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _ngo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _requestId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _blockNumber(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class WithdrawRequested extends ethereum.Event {
  get params(): WithdrawRequested__Params {
    return new WithdrawRequested__Params(this);
  }
}

export class WithdrawRequested__Params {
  _event: WithdrawRequested;

  constructor(event: WithdrawRequested) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _ngo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _requestId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _blockNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _stakeId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NgoLis__getHistoryDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_reward(): BigInt {
    return this.value0;
  }

  get_totalShares(): BigInt {
    return this.value1;
  }

  get_balance(): BigInt {
    return this.value2;
  }
}

export class NgoLis__getUserStakeInfoResult_userStakeInfoStruct extends ethereum.Tuple {
  get percent(): i32 {
    return this[0].toI32();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get startDate(): BigInt {
    return this[2].toBigInt();
  }
}

export class NgoLis extends ethereum.SmartContract {
  static bind(address: Address): NgoLis {
    return new NgoLis("NgoLis", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getCurrentBalanceFromLido(): BigInt {
    let result = super.call(
      "getCurrentBalanceFromLido",
      "getCurrentBalanceFromLido():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCurrentBalanceFromLido(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentBalanceFromLido",
      "getCurrentBalanceFromLido():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHistoryData(_timestamp: BigInt): NgoLis__getHistoryDataResult {
    let result = super.call(
      "getHistoryData",
      "getHistoryData(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)],
    );

    return new NgoLis__getHistoryDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getHistoryData(
    _timestamp: BigInt,
  ): ethereum.CallResult<NgoLis__getHistoryDataResult> {
    let result = super.tryCall(
      "getHistoryData",
      "getHistoryData(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NgoLis__getHistoryDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  getUserBalance(_user: Address, _id: BigInt): BigInt {
    let result = super.call(
      "getUserBalance",
      "getUserBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_id),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUserBalance(_user: Address, _id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserBalance",
      "getUserBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserStakeInfo(
    _user: Address,
    _id: BigInt,
  ): NgoLis__getUserStakeInfoResult_userStakeInfoStruct {
    let result = super.call(
      "getUserStakeInfo",
      "getUserStakeInfo(address,uint256):((uint16,uint256,uint256))",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_id),
      ],
    );

    return changetype<NgoLis__getUserStakeInfoResult_userStakeInfoStruct>(
      result[0].toTuple(),
    );
  }

  try_getUserStakeInfo(
    _user: Address,
    _id: BigInt,
  ): ethereum.CallResult<NgoLis__getUserStakeInfoResult_userStakeInfoStruct> {
    let result = super.tryCall(
      "getUserStakeInfo",
      "getUserStakeInfo(address,uint256):((uint16,uint256,uint256))",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NgoLis__getUserStakeInfoResult_userStakeInfoStruct>(
        value[0].toTuple(),
      ),
    );
  }

  isFinish(): boolean {
    let result = super.call("isFinish", "isFinish():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFinish(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinish", "isFinish():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lidoSC(): Address {
    let result = super.call("lidoSC", "lidoSC():(address)", []);

    return result[0].toAddress();
  }

  try_lidoSC(): ethereum.CallResult<Address> {
    let result = super.tryCall("lidoSC", "lidoSC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rewardsOwner(): Address {
    let result = super.call("rewardsOwner", "rewardsOwner():(address)", []);

    return result[0].toAddress();
  }

  try_rewardsOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardsOwner", "rewardsOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedBalance(): BigInt {
    let result = super.call("stakedBalance", "stakedBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedBalance",
      "stakedBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalSC(): Address {
    let result = super.call("withdrawalSC", "withdrawalSC():(address)", []);

    return result[0].toAddress();
  }

  try_withdrawalSC(): ethereum.CallResult<Address> {
    let result = super.tryCall("withdrawalSC", "withdrawalSC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ClaimWithdrawalCall extends ethereum.Call {
  get inputs(): ClaimWithdrawalCall__Inputs {
    return new ClaimWithdrawalCall__Inputs(this);
  }

  get outputs(): ClaimWithdrawalCall__Outputs {
    return new ClaimWithdrawalCall__Outputs(this);
  }
}

export class ClaimWithdrawalCall__Inputs {
  _call: ClaimWithdrawalCall;

  constructor(call: ClaimWithdrawalCall) {
    this._call = call;
  }

  get _requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimWithdrawalCall__Outputs {
  _call: ClaimWithdrawalCall;

  constructor(call: ClaimWithdrawalCall) {
    this._call = call;
  }
}

export class EndNGOCall extends ethereum.Call {
  get inputs(): EndNGOCall__Inputs {
    return new EndNGOCall__Inputs(this);
  }

  get outputs(): EndNGOCall__Outputs {
    return new EndNGOCall__Outputs(this);
  }
}

export class EndNGOCall__Inputs {
  _call: EndNGOCall;

  constructor(call: EndNGOCall) {
    this._call = call;
  }
}

export class EndNGOCall__Outputs {
  _call: EndNGOCall;

  constructor(call: EndNGOCall) {
    this._call = call;
  }
}

export class HandleNGOShareDistributionCall extends ethereum.Call {
  get inputs(): HandleNGOShareDistributionCall__Inputs {
    return new HandleNGOShareDistributionCall__Inputs(this);
  }

  get outputs(): HandleNGOShareDistributionCall__Outputs {
    return new HandleNGOShareDistributionCall__Outputs(this);
  }
}

export class HandleNGOShareDistributionCall__Inputs {
  _call: HandleNGOShareDistributionCall;

  constructor(call: HandleNGOShareDistributionCall) {
    this._call = call;
  }
}

export class HandleNGOShareDistributionCall__Outputs {
  _call: HandleNGOShareDistributionCall;

  constructor(call: HandleNGOShareDistributionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get lidoSCAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardOwnerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get withdrawalSCAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestWithdrawalsCall extends ethereum.Call {
  get inputs(): RequestWithdrawalsCall__Inputs {
    return new RequestWithdrawalsCall__Inputs(this);
  }

  get outputs(): RequestWithdrawalsCall__Outputs {
    return new RequestWithdrawalsCall__Outputs(this);
  }
}

export class RequestWithdrawalsCall__Inputs {
  _call: RequestWithdrawalsCall;

  constructor(call: RequestWithdrawalsCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestWithdrawalsCall__Outputs {
  _call: RequestWithdrawalsCall;

  constructor(call: RequestWithdrawalsCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get _newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _ngoPercent(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeStEthCall extends ethereum.Call {
  get inputs(): StakeStEthCall__Inputs {
    return new StakeStEthCall__Inputs(this);
  }

  get outputs(): StakeStEthCall__Outputs {
    return new StakeStEthCall__Outputs(this);
  }
}

export class StakeStEthCall__Inputs {
  _call: StakeStEthCall;

  constructor(call: StakeStEthCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ngoPercent(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class StakeStEthCall__Outputs {
  _call: StakeStEthCall;

  constructor(call: StakeStEthCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
